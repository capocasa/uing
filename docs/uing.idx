Widget	uing.html#Widget	uing: Widget	
impl	uing.html#impl,Widget	uing: impl(w: Widget): ptr [Control]	
init	uing.html#init	uing: init()	
quit	uing.html#quit	uing: quit()	
mainLoop	uing.html#mainLoop	uing: mainLoop()	
pollingMainLoop	uing.html#pollingMainLoop,proc(int),int	uing: pollingMainLoop(poll: proc (timeout: int); timeout: int)	
queueMain	uing.html#queueMain,proc(pointer),pointer	uing: queueMain(f: proc (data: pointer) {.cdecl.}; data: pointer)	
mainSteps	uing.html#mainSteps	uing: mainSteps()	
mainStep	uing.html#mainStep,int	uing: mainStep(wait: int): bool	
timer	uing.html#timer,int,proc)	uing: timer(milliseconds: int; fun: proc (): bool)	
free	uing.html#free,string	uing: free(str: string)	
loadControlFont	uing.html#loadControlFont,ptr.FontDescriptor	uing: loadControlFont(f: ptr FontDescriptor)	
free	uing.html#free,ptr.FontDescriptor	uing: free(f: ptr FontDescriptor)	
Area	uing.html#Area	uing: Area	
impl	uing.html#impl,Area	uing: impl(b: Area): RawArea	
impl=	uing.html#impl=,Area,RawArea	uing: impl=(b: Area; r: RawArea)	
size=	uing.html#size=,Area,tuple[int,int]	uing: size=(a: Area; size: tuple[width, height: int])	
queueRedrawAll	uing.html#queueRedrawAll,Area	uing: queueRedrawAll(a: Area)	
beginUserWindowMove	uing.html#beginUserWindowMove,Area	uing: beginUserWindowMove(a: Area)	
beginUserWindowResize	uing.html#beginUserWindowResize,Area,WindowResizeEdge	uing: beginUserWindowResize(a: Area; edge: WindowResizeEdge)	
scrollTo	uing.html#scrollTo,Area,float,float,float,float	uing: scrollTo(a: Area; x, y, width, height: float)	
handler	uing.html#handler,Area	uing: handler(a: Area): ptr AreaHandler	
newArea	uing.html#newArea,ptr.AreaHandler	uing: newArea(ah: ptr AreaHandler): Area	
newScrollingArea	uing.html#newScrollingArea,ptr.AreaHandler,int,int	uing: newScrollingArea(ah: ptr AreaHandler; width, height: int): Area	
DrawPath	uing.html#DrawPath	uing: DrawPath	
impl	uing.html#impl,DrawPath	uing: impl(b: DrawPath): RawDrawPath	
impl=	uing.html#impl=,DrawPath,RawDrawPath	uing: impl=(b: DrawPath; r: RawDrawPath)	
newDrawPath	uing.html#newDrawPath,DrawFillMode	uing: newDrawPath(fillMode: DrawFillMode): DrawPath	
free	uing.html#free,DrawPath	uing: free(p: DrawPath)	
newFigure	uing.html#newFigure,DrawPath,float,float	uing: newFigure(p: DrawPath; x: float; y: float)	
newFigureWithArc	uing.html#newFigureWithArc,DrawPath,float,float,float,float,float,int	uing: newFigureWithArc(p: DrawPath;\n                 xCenter, yCenter, radius, startAngle, sweep: float;\n                 negative: int)	
lineTo	uing.html#lineTo,DrawPath,float,float	uing: lineTo(p: DrawPath; x, y: float)	
arcTo	uing.html#arcTo,DrawPath,float,float,float,float,float,int	uing: arcTo(p: DrawPath; xCenter, yCenter, radius, startAngle, sweep: float;\n      negative: int)	
bezierTo	uing.html#bezierTo,DrawPath,float,float,float,float,float,float	uing: bezierTo(p: DrawPath; c1x, c1y, c2x, c2y, endX, endY: float)	
closeFigure	uing.html#closeFigure,DrawPath	uing: closeFigure(p: DrawPath)	
addRectangle	uing.html#addRectangle,DrawPath,float,float,float,float	uing: addRectangle(p: DrawPath; x, y, width, height: float)	
ended	uing.html#ended,DrawPath	uing: ended(p: DrawPath): bool	
`end`	uing.html#end,DrawPath	uing: `end`(p: DrawPath)	
stroke	uing.html#stroke,ptr.DrawContext,DrawPath,ptr.DrawBrush,ptr.DrawStrokeParams	uing: stroke(c: ptr DrawContext; path: DrawPath; b: ptr DrawBrush;\n       p: ptr DrawStrokeParams)	
fill	uing.html#fill,ptr.DrawContext,DrawPath,ptr.DrawBrush	uing: fill(c: ptr DrawContext; path: DrawPath; b: ptr DrawBrush)	
transform	uing.html#transform,ptr.DrawContext,ptr.DrawMatrix	uing: transform(c: ptr DrawContext; m: ptr DrawMatrix)	
setIdentity	uing.html#setIdentity,ptr.DrawMatrix	uing: setIdentity(m: ptr DrawMatrix)	
translate	uing.html#translate,ptr.DrawMatrix,float,float	uing: translate(m: ptr DrawMatrix; x, y: float)	
scale	uing.html#scale,ptr.DrawMatrix,float,float,float,float	uing: scale(m: ptr DrawMatrix; xCenter, yCenter, x, y: float)	
rotate	uing.html#rotate,ptr.DrawMatrix,float,float,float	uing: rotate(m: ptr DrawMatrix; x, y, amount: float)	
skew	uing.html#skew,ptr.DrawMatrix,float,float,float,float	uing: skew(m: ptr DrawMatrix; x, y, xamount, yamount: float)	
multiply	uing.html#multiply,ptr.DrawMatrix,ptr.DrawMatrix	uing: multiply(dest, src: ptr DrawMatrix)	
invertible	uing.html#invertible,ptr.DrawMatrix	uing: invertible(m: ptr DrawMatrix): bool	
invert	uing.html#invert,ptr.DrawMatrix	uing: invert(m: ptr DrawMatrix): int	
transformPoint	uing.html#transformPoint,ptr.DrawMatrix	uing: transformPoint(m: ptr DrawMatrix): tuple[x, y: float]	
transformSize	uing.html#transformSize,ptr.DrawMatrix	uing: transformSize(m: ptr DrawMatrix): tuple[x, y: float]	
Attribute	uing.html#Attribute	uing: Attribute	
AttributedString	uing.html#AttributedString	uing: AttributedString	
impl	uing.html#impl,Attribute	uing: impl(b: Attribute): RawAttribute	
impl=	uing.html#impl=,Attribute,RawAttribute	uing: impl=(b: Attribute; r: RawAttribute)	
impl	uing.html#impl,AttributedString	uing: impl(b: AttributedString): RawAttributedString	
impl=	uing.html#impl=,AttributedString,RawAttributedString	uing: impl=(b: AttributedString; r: RawAttributedString)	
newAttributedString	uing.html#newAttributedString,string	uing: newAttributedString(initialString: string): AttributedString	
free	uing.html#free,AttributedString	uing: free(a: AttributedString)	
`$`	uing.html#$,AttributedString	uing: `$`(s: AttributedString): string	
len	uing.html#len,AttributedString	uing: len(s: AttributedString): int	
addUnattributed	uing.html#addUnattributed,AttributedString,string	uing: addUnattributed(s: AttributedString; str: string)	
insertAtUnattributed	uing.html#insertAtUnattributed,AttributedString,string,int	uing: insertAtUnattributed(s: AttributedString; str: string; at: int)	
delete	uing.html#delete,AttributedString,int,int	uing: delete(s: AttributedString; start, end: int)	
setAttribute	uing.html#setAttribute,AttributedString,Attribute,int,int	uing: setAttribute(s: AttributedString; a: Attribute; start, end: int)	
addWithAttributes	uing.html#addWithAttributes,AttributedString,string,varargs[Attribute]	uing: addWithAttributes(s: AttributedString; str: string; attrs: varargs[Attribute])	
forEachAttribute	uing.html#forEachAttribute,AttributedString,proc(AttributedString,Attribute,int,int)	uing: forEachAttribute(str: AttributedString; fun: proc (s: AttributedString;\n    a: Attribute; start, end: int): ForEach)	
numGraphemes	uing.html#numGraphemes,AttributedString	uing: numGraphemes(s: AttributedString): int	
byteIndexToGrapheme	uing.html#byteIndexToGrapheme,AttributedString,int	uing: byteIndexToGrapheme(s: AttributedString; pos: int): int	
graphemeToByteIndex	uing.html#graphemeToByteIndex,AttributedString,int	uing: graphemeToByteIndex(s: AttributedString; pos: int): int	
free	uing.html#free,Attribute	uing: free(a: Attribute)	
getType	uing.html#getType,Attribute	uing: getType(a: Attribute): AttributeType	
newFamilyAttribute	uing.html#newFamilyAttribute,string	uing: newFamilyAttribute(family: string): Attribute	
family	uing.html#family,Attribute	uing: family(a: Attribute): string	
newSizeAttribute	uing.html#newSizeAttribute,float	uing: newSizeAttribute(size: float): Attribute	
size	uing.html#size,Attribute	uing: size(a: Attribute): float	
newWeightAttribute	uing.html#newWeightAttribute,TextWeight	uing: newWeightAttribute(weight: TextWeight): Attribute	
weight	uing.html#weight,Attribute	uing: weight(a: Attribute): TextWeight	
newItalicAttribute	uing.html#newItalicAttribute,TextItalic	uing: newItalicAttribute(italic: TextItalic): Attribute	
italic	uing.html#italic,Attribute	uing: italic(a: Attribute): TextItalic	
newStretchAttribute	uing.html#newStretchAttribute,TextStretch	uing: newStretchAttribute(stretch: TextStretch): Attribute	
stretch	uing.html#stretch,Attribute	uing: stretch(a: Attribute): TextStretch	
newColorAttribute	uing.html#newColorAttribute,float,float,float,float	uing: newColorAttribute(r, g, b, a: float = 1.0): Attribute	
newColorAttribute	uing.html#newColorAttribute,Color,float	uing: newColorAttribute(color: Color; a: float = 1.0): Attribute	
color	uing.html#color,Attribute	uing: color(a: Attribute): tuple[r, g, b, alpha: float]	
newBackgroundColorAttribute	uing.html#newBackgroundColorAttribute,float,float,float,float	uing: newBackgroundColorAttribute(r, g, b, a: float = 1.0): Attribute	
newBackgroundColorAttribute	uing.html#newBackgroundColorAttribute,Color,float	uing: newBackgroundColorAttribute(color: Color; a: float = 1.0): Attribute	
newUnderlineAttribute	uing.html#newUnderlineAttribute,Underline	uing: newUnderlineAttribute(u: Underline): Attribute	
underline	uing.html#underline,Attribute	uing: underline(a: Attribute): Underline	
newUnderlineColorAttribute	uing.html#newUnderlineColorAttribute,UnderlineColor,float,float,float,float	uing: newUnderlineColorAttribute(u: UnderlineColor; r = 0.0; g = 0.0; b = 0.0;\n                           a: float = 0.0): Attribute	
newUnderlineColorAttribute	uing.html#newUnderlineColorAttribute,UnderlineColor,Color,float	uing: newUnderlineColorAttribute(u: UnderlineColor; color: Color; a: float = 0.0): Attribute	
underlineColor	uing.html#underlineColor,Attribute	uing: underlineColor(a: Attribute): tuple[u: UnderlineColor, r, g, b, alpha: float]	
OpenTypeFeatures	uing.html#OpenTypeFeatures	uing: OpenTypeFeatures	
impl	uing.html#impl,OpenTypeFeatures	uing: impl(b: OpenTypeFeatures): RawOpenTypeFeatures	
impl=	uing.html#impl=,OpenTypeFeatures,RawOpenTypeFeatures	uing: impl=(b: OpenTypeFeatures; r: RawOpenTypeFeatures)	
newOpenTypeFeatures	uing.html#newOpenTypeFeatures	uing: newOpenTypeFeatures(): OpenTypeFeatures	
free	uing.html#free,OpenTypeFeatures	uing: free(otf: OpenTypeFeatures)	
clone	uing.html#clone,OpenTypeFeatures	uing: clone(otf: OpenTypeFeatures): OpenTypeFeatures	
add	uing.html#add,OpenTypeFeatures,char,char,char,char,uint32	uing: add(otf: OpenTypeFeatures; a, b, c, d: char; value: uint32)	
add	uing.html#add,OpenTypeFeatures,string,	uing: add(otf: OpenTypeFeatures; abcd: string; value: uint32 | bool)	
remove	uing.html#remove,OpenTypeFeatures,char,char,char,char	uing: remove(otf: OpenTypeFeatures; a, b, c, d: char)	
remove	uing.html#remove,OpenTypeFeatures,string	uing: remove(otf: OpenTypeFeatures; abcd: string)	
get	uing.html#get,OpenTypeFeatures,char,char,char,char,int	uing: get(otf: OpenTypeFeatures; a, b, c, d: char; value: var int): bool	
get	uing.html#get,OpenTypeFeatures,string,int	uing: get(otf: OpenTypeFeatures; abcd: string; value: var int): bool	
forEach	uing.html#forEach,OpenTypeFeatures,proc(OpenTypeFeatures,string,int)	uing: forEach(otf: OpenTypeFeatures;\n        f: proc (otf: OpenTypeFeatures; abcd: string; value: int): ForEach)	
newFeaturesAttribute	uing.html#newFeaturesAttribute,OpenTypeFeatures	uing: newFeaturesAttribute(otf: OpenTypeFeatures): Attribute	
features	uing.html#features,Attribute	uing: features(a: Attribute): OpenTypeFeatures	
DrawTextLayout	uing.html#DrawTextLayout	uing: DrawTextLayout	
impl	uing.html#impl,DrawTextLayout	uing: impl(b: DrawTextLayout): RawDrawTextLayout	
impl=	uing.html#impl=,DrawTextLayout,RawDrawTextLayout	uing: impl=(b: DrawTextLayout; r: RawDrawTextLayout)	
newDrawTextLayout	uing.html#newDrawTextLayout,ptr.DrawTextLayoutParams	uing: newDrawTextLayout(params: ptr DrawTextLayoutParams): DrawTextLayout	
free	uing.html#free,DrawTextLayout	uing: free(tl: DrawTextLayout)	
drawText	uing.html#drawText,ptr.DrawContext,DrawTextLayout,tuple[float,float]	uing: drawText(c: ptr DrawContext; tl: DrawTextLayout; point: tuple[x, y: float])	
extents	uing.html#extents,DrawTextLayout	uing: extents(tl: DrawTextLayout): tuple[width, height: float]	
Button	uing.html#Button	uing: Button	
impl	uing.html#impl,Button	uing: impl(b: Button): RawButton	
impl=	uing.html#impl=,Button,RawButton	uing: impl=(b: Button; r: RawButton)	
text	uing.html#text,Button	uing: text(b: Button): string	
text=	uing.html#text=,Button,string	uing: text=(b: Button; text: string)	
newButton	uing.html#newButton,string,proc(Button)	uing: newButton(text: string; onclick: proc (sender: Button) = nil): Button	
RadioButtons	uing.html#RadioButtons	uing: RadioButtons	
impl	uing.html#impl,RadioButtons	uing: impl(b: RadioButtons): RawRadioButtons	
impl=	uing.html#impl=,RadioButtons,RawRadioButtons	uing: impl=(b: RadioButtons; r: RawRadioButtons)	
add	uing.html#add,RadioButtons,varargs[string,]	uing: add(r: RadioButtons; items: varargs[string, `$`])	
selected	uing.html#selected,RadioButtons	uing: selected(r: RadioButtons): int	
selected=	uing.html#selected=,RadioButtons,int	uing: selected=(r: RadioButtons; index: int)	
newRadioButtons	uing.html#newRadioButtons,openArray[string],proc(RadioButtons)	uing: newRadioButtons(items: openArray[string] = [];\n                onselected: proc (sender: RadioButtons) = nil): RadioButtons	
Window	uing.html#Window	uing: Window	
impl	uing.html#impl,Window	uing: impl(b: Window): RawWindow	
impl=	uing.html#impl=,Window,RawWindow	uing: impl=(b: Window; r: RawWindow)	
title	uing.html#title,Window	uing: title(w: Window): string	
title=	uing.html#title=,Window,string	uing: title=(w: Window; text: string)	
contentSize	uing.html#contentSize,Window	uing: contentSize(window: Window): tuple[width, height: int]	
contentSize=	uing.html#contentSize=,Window,tuple[int,int]	uing: contentSize=(window: Window; size: tuple[width, height: int])	
fullscreen	uing.html#fullscreen,Window	uing: fullscreen(w: Window): bool	
fullscreen=	uing.html#fullscreen=,Window,bool	uing: fullscreen=(w: Window; fullscreen: bool)	
focused	uing.html#focused,Window	uing: focused(w: Window): bool	
borderless	uing.html#borderless,Window	uing: borderless(w: Window): bool	
borderless=	uing.html#borderless=,Window,bool	uing: borderless=(w: Window; borderless: bool)	
resizeable	uing.html#resizeable,Window	uing: resizeable(w: Window): bool	
resizeable=	uing.html#resizeable=,Window,bool	uing: resizeable=(w: Window; resizeable: bool)	
margined	uing.html#margined,Window	uing: margined(w: Window): bool	
margined=	uing.html#margined=,Window,bool	uing: margined=(w: Window; margined: bool)	
child	uing.html#child,Window	uing: child(w: Window): Widget	
child=	uing.html#child=,Window,Widget	uing: child=(w: Window; child: Widget)	
openFile	uing.html#openFile,Window	uing: openFile(parent: Window): string	
openFolder	uing.html#openFolder,Window	uing: openFolder(parent: Window): string	
saveFile	uing.html#saveFile,Window	uing: saveFile(parent: Window): string	
msgBox	uing.html#msgBox,Window,string,string	uing: msgBox(parent: Window; title, desc: string)	
msgBoxError	uing.html#msgBoxError,Window,string,string	uing: msgBoxError(parent: Window; title, desc: string)	
error	uing.html#error,Window,string,string	uing: error(parent: Window; title, desc: string)	
newWindow	uing.html#newWindow,string,int,int,bool,proc(Window)	uing: newWindow(title: string; width, height: int; hasMenubar: bool = false;\n          onfocuschanged: proc (sender: Window) = nil): Window	
Box	uing.html#Box	uing: Box	
impl	uing.html#impl,Box	uing: impl(b: Box): RawBox	
impl=	uing.html#impl=,Box,RawBox	uing: impl=(b: Box; r: RawBox)	
add	uing.html#add,Box,Widget	uing: add(b: Box; child: Widget; stretchy = false)	
add	uing.html#add,Box,openArray[Widget]	uing: add(c: Box; items: openArray[Widget]; stretchy = false)	
delete	uing.html#delete,Box,int	uing: delete(b: Box; index: int)	
padded	uing.html#padded,Box	uing: padded(b: Box): bool	
padded=	uing.html#padded=,Box,bool	uing: padded=(b: Box; padded: bool)	
newHorizontalBox	uing.html#newHorizontalBox	uing: newHorizontalBox(padded = false): Box	
newVerticalBox	uing.html#newVerticalBox	uing: newVerticalBox(padded = false): Box	
Checkbox	uing.html#Checkbox	uing: Checkbox	
impl	uing.html#impl,Checkbox	uing: impl(b: Checkbox): RawCheckbox	
impl=	uing.html#impl=,Checkbox,RawCheckbox	uing: impl=(b: Checkbox; r: RawCheckbox)	
text	uing.html#text,Checkbox	uing: text(c: Checkbox): string	
text=	uing.html#text=,Checkbox,string	uing: text=(c: Checkbox; text: string)	
checked	uing.html#checked,Checkbox	uing: checked(c: Checkbox): bool	
checked=	uing.html#checked=,Checkbox,bool	uing: checked=(c: Checkbox; checked: bool)	
newCheckbox	uing.html#newCheckbox,string,proc(Checkbox)	uing: newCheckbox(text: string; ontoggled: proc (sender: Checkbox) = nil): Checkbox	
Entry	uing.html#Entry	uing: Entry	
impl	uing.html#impl,Entry	uing: impl(b: Entry): RawEntry	
impl=	uing.html#impl=,Entry,RawEntry	uing: impl=(b: Entry; r: RawEntry)	
text	uing.html#text,Entry	uing: text(e: Entry): string	
text=	uing.html#text=,Entry,string	uing: text=(e: Entry; text: string)	
clear	uing.html#clear,Entry	uing: clear(e: Entry)	
readOnly	uing.html#readOnly,Entry	uing: readOnly(e: Entry): bool	
readOnly=	uing.html#readOnly=,Entry,bool	uing: readOnly=(e: Entry; readOnly: bool)	
newEntry	uing.html#newEntry,string,proc(Entry)	uing: newEntry(text: string = &quot;&quot;; onchanged: proc (sender: Entry) = nil): Entry	
newPasswordEntry	uing.html#newPasswordEntry,string,proc(Entry)	uing: newPasswordEntry(text: string = &quot;&quot;; onchanged: proc (sender: Entry) = nil): Entry	
newSearchEntry	uing.html#newSearchEntry,string,proc(Entry)	uing: newSearchEntry(text: string = &quot;&quot;; onchanged: proc (sender: Entry) = nil): Entry	
Label	uing.html#Label	uing: Label	
impl	uing.html#impl,Label	uing: impl(b: Label): RawLabel	
impl=	uing.html#impl=,Label,RawLabel	uing: impl=(b: Label; r: RawLabel)	
text	uing.html#text,Label	uing: text(l: Label): string	
text=	uing.html#text=,Label,string	uing: text=(l: Label; text: string)	
newLabel	uing.html#newLabel,string	uing: newLabel(text: string = &quot;&quot;): Label	
Tab	uing.html#Tab	uing: Tab	
impl	uing.html#impl,Tab	uing: impl(b: Tab): RawTab	
impl=	uing.html#impl=,Tab,RawTab	uing: impl=(b: Tab; r: RawTab)	
add	uing.html#add,Tab,string,Widget	uing: add(t: Tab; name: string; w: Widget)	
insertAt	uing.html#insertAt,Tab,string,int,Widget	uing: insertAt(t: Tab; name: string; index: int; w: Widget)	
delete	uing.html#delete,Tab,int	uing: delete(t: Tab; index: int)	
margined	uing.html#margined,Tab,int	uing: margined(t: Tab; index: int): bool	
setMargined	uing.html#setMargined,Tab,int,bool	uing: setMargined(t: Tab; index: int; margined: bool)	
newTab	uing.html#newTab	uing: newTab(): Tab	
Group	uing.html#Group	uing: Group	
impl	uing.html#impl,Group	uing: impl(b: Group): RawGroup	
impl=	uing.html#impl=,Group,RawGroup	uing: impl=(b: Group; r: RawGroup)	
title	uing.html#title,Group	uing: title(g: Group): string	
title=	uing.html#title=,Group,string	uing: title=(g: Group; title: string)	
child	uing.html#child,Group	uing: child(g: Group): Widget	
child=	uing.html#child=,Group,Widget	uing: child=(g: Group; c: Widget)	
margined	uing.html#margined,Group	uing: margined(g: Group): bool	
margined=	uing.html#margined=,Group,bool	uing: margined=(g: Group; margined: bool)	
newGroup	uing.html#newGroup,string,bool	uing: newGroup(title: string; margined: bool = false): Group	
Spinbox	uing.html#Spinbox	uing: Spinbox	
impl	uing.html#impl,Spinbox	uing: impl(b: Spinbox): RawSpinbox	
impl=	uing.html#impl=,Spinbox,RawSpinbox	uing: impl=(b: Spinbox; r: RawSpinbox)	
value	uing.html#value,Spinbox	uing: value(s: Spinbox): int	
value=	uing.html#value=,Spinbox,int	uing: value=(s: Spinbox; value: int)	
newSpinbox	uing.html#newSpinbox,Slice[SomeInteger],proc(Spinbox)	uing: newSpinbox(range: Slice[SomeInteger]; onchanged: proc (sender: Spinbox) = nil): Spinbox	
Slider	uing.html#Slider	uing: Slider	
impl	uing.html#impl,Slider	uing: impl(b: Slider): RawSlider	
impl=	uing.html#impl=,Slider,RawSlider	uing: impl=(b: Slider; r: RawSlider)	
value	uing.html#value,Slider	uing: value(s: Slider): int	
value=	uing.html#value=,Slider,int	uing: value=(s: Slider; value: int)	
hasToolTip	uing.html#hasToolTip,Slider	uing: hasToolTip(s: Slider): bool	
hasToolTip=	uing.html#hasToolTip=,Slider,bool	uing: hasToolTip=(s: Slider; hasToolTip: bool)	
range=	uing.html#range=,Slider,Slice[SomeInteger]	uing: range=(s: Slider; sliderRange: Slice[SomeInteger])	
newSlider	uing.html#newSlider,Slice[SomeInteger],proc(Slider)	uing: newSlider(range: Slice[SomeInteger]; onchanged: proc (sender: Slider) = nil): Slider	
ProgressBar	uing.html#ProgressBar	uing: ProgressBar	
impl	uing.html#impl,ProgressBar	uing: impl(b: ProgressBar): RawProgressBar	
impl=	uing.html#impl=,ProgressBar,RawProgressBar	uing: impl=(b: ProgressBar; r: RawProgressBar)	
value	uing.html#value,ProgressBar	uing: value(p: ProgressBar): int	
value=	uing.html#value=,ProgressBar,	uing: value=(p: ProgressBar; n: -1 .. 100)	
newProgressBar	uing.html#newProgressBar,bool	uing: newProgressBar(indeterminate: bool = false): ProgressBar	
Separator	uing.html#Separator	uing: Separator	
impl	uing.html#impl,Separator	uing: impl(b: Separator): RawSeparator	
impl=	uing.html#impl=,Separator,RawSeparator	uing: impl=(b: Separator; r: RawSeparator)	
newVerticalSeparator	uing.html#newVerticalSeparator	uing: newVerticalSeparator(): Separator	
newHorizontalSeparator	uing.html#newHorizontalSeparator	uing: newHorizontalSeparator(): Separator	
Combobox	uing.html#Combobox	uing: Combobox	
impl	uing.html#impl,Combobox	uing: impl(b: Combobox): RawCombobox	
impl=	uing.html#impl=,Combobox,RawCombobox	uing: impl=(b: Combobox; r: RawCombobox)	
add	uing.html#add,Combobox,varargs[string,]	uing: add(c: Combobox; items: varargs[string, `$`])	
insertAt	uing.html#insertAt,Combobox,int,string	uing: insertAt(c: Combobox; index: int; text: string)	
clear	uing.html#clear,Combobox	uing: clear(c: Combobox)	
delete	uing.html#delete,Combobox,int	uing: delete(c: Combobox; index: int)	
selected	uing.html#selected,Combobox	uing: selected(c: Combobox): int	
selected=	uing.html#selected=,Combobox,int	uing: selected=(c: Combobox; index: int)	
newCombobox	uing.html#newCombobox,openArray[string],proc(Combobox)	uing: newCombobox(items: openArray[string] = [];\n            onselected: proc (sender: Combobox) = nil): Combobox	
EditableCombobox	uing.html#EditableCombobox	uing: EditableCombobox	
impl	uing.html#impl,EditableCombobox	uing: impl(b: EditableCombobox): RawEditableCombobox	
impl=	uing.html#impl=,EditableCombobox,RawEditableCombobox	uing: impl=(b: EditableCombobox; r: RawEditableCombobox)	
add	uing.html#add,EditableCombobox,varargs[string,]	uing: add(c: EditableCombobox; items: varargs[string, `$`])	
text	uing.html#text,EditableCombobox	uing: text(c: EditableCombobox): string	
text=	uing.html#text=,EditableCombobox,string	uing: text=(c: EditableCombobox; text: string)	
clear	uing.html#clear,EditableCombobox	uing: clear(e: EditableCombobox)	
newEditableCombobox	uing.html#newEditableCombobox,openArray[string],proc(EditableCombobox)	uing: newEditableCombobox(items: openArray[string] = [];\n                    onchanged: proc (sender: EditableCombobox) = nil): EditableCombobox	
MultilineEntry	uing.html#MultilineEntry	uing: MultilineEntry	
impl	uing.html#impl,MultilineEntry	uing: impl(b: MultilineEntry): RawMultilineEntry	
impl=	uing.html#impl=,MultilineEntry,RawMultilineEntry	uing: impl=(b: MultilineEntry; r: RawMultilineEntry)	
text	uing.html#text,MultilineEntry	uing: text(e: MultilineEntry): string	
text=	uing.html#text=,MultilineEntry,string	uing: text=(e: MultilineEntry; text: string)	
clear	uing.html#clear,MultilineEntry	uing: clear(e: MultilineEntry)	
add	uing.html#add,MultilineEntry,string	uing: add(e: MultilineEntry; text: string)	
readOnly	uing.html#readOnly,MultilineEntry	uing: readOnly(e: MultilineEntry): bool	
readOnly=	uing.html#readOnly=,MultilineEntry,bool	uing: readOnly=(e: MultilineEntry; readOnly: bool)	
newMultilineEntry	uing.html#newMultilineEntry,proc(MultilineEntry)	uing: newMultilineEntry(onchanged: proc (sender: MultilineEntry) = nil): MultilineEntry	
newNonWrappingMultilineEntry	uing.html#newNonWrappingMultilineEntry,proc(MultilineEntry)	uing: newNonWrappingMultilineEntry(onchanged: proc (sender: MultilineEntry) = nil): MultilineEntry	
MenuItem	uing.html#MenuItem	uing: MenuItem	
impl	uing.html#impl,MenuItem	uing: impl(b: MenuItem): RawMenuItem	
impl=	uing.html#impl=,MenuItem,RawMenuItem	uing: impl=(b: MenuItem; r: RawMenuItem)	
enable	uing.html#enable,MenuItem	uing: enable(m: MenuItem)	
disable	uing.html#disable,MenuItem	uing: disable(m: MenuItem)	
checked	uing.html#checked,MenuItem	uing: checked(m: MenuItem): bool	
checked=	uing.html#checked=,MenuItem,bool	uing: checked=(m: MenuItem; checked: bool)	
Menu	uing.html#Menu	uing: Menu	
impl	uing.html#impl,Menu	uing: impl(b: Menu): RawMenu	
impl=	uing.html#impl=,Menu,RawMenu	uing: impl=(b: Menu; r: RawMenu)	
addItem	uing.html#addItem,Menu,string,proc(MenuItem,Window)	uing: addItem(m: Menu; name: string;\n        onclicked: proc (sender: MenuItem; window: Window) = nil): MenuItem	
addCheckItem	uing.html#addCheckItem,Menu,string,proc(MenuItem,Window)	uing: addCheckItem(m: Menu; name: string;\n             onclicked: proc (sender: MenuItem; window: Window) = nil): MenuItem	
addQuitItem	uing.html#addQuitItem,Menu,proc)	uing: addQuitItem(m: Menu; shouldQuit: proc (): bool): MenuItem	
addPreferencesItem	uing.html#addPreferencesItem,Menu,proc(MenuItem,Window)	uing: addPreferencesItem(m: Menu;\n                   onclicked: proc (sender: MenuItem; window: Window) = nil): MenuItem	
addAboutItem	uing.html#addAboutItem,Menu,proc(MenuItem,Window)	uing: addAboutItem(m: Menu; onclicked: proc (sender: MenuItem; window: Window) = nil): MenuItem	
addSeparator	uing.html#addSeparator,Menu	uing: addSeparator(m: Menu)	
newMenu	uing.html#newMenu,string	uing: newMenu(name: string): Menu	
FontButton	uing.html#FontButton	uing: FontButton	
impl	uing.html#impl,FontButton	uing: impl(b: FontButton): RawFontButton	
impl=	uing.html#impl=,FontButton,RawFontButton	uing: impl=(b: FontButton; r: RawFontButton)	
font	uing.html#font,FontButton	uing: font(f: FontButton): FontDescriptor	
freeFont	uing.html#freeFont,ptr.FontDescriptor	uing: freeFont(desc: ptr FontDescriptor)	
newFontButton	uing.html#newFontButton,proc(FontButton)	uing: newFontButton(onchanged: proc (sender: FontButton) = nil): FontButton	
ColorButton	uing.html#ColorButton	uing: ColorButton	
impl	uing.html#impl,ColorButton	uing: impl(b: ColorButton): RawColorButton	
impl=	uing.html#impl=,ColorButton,RawColorButton	uing: impl=(b: ColorButton; r: RawColorButton)	
color	uing.html#color,ColorButton	uing: color(c: ColorButton): tuple[r, g, b, a: float]	
setColor	uing.html#setColor,ColorButton,float,float,float,float	uing: setColor(c: ColorButton; r, g, b, alpha: 0.0 .. 1.0 = 1.0)	
color=	uing.html#color=,ColorButton,Color	uing: color=(c: ColorButton; color: Color)	
newColorButton	uing.html#newColorButton,proc(ColorButton)	uing: newColorButton(onchanged: proc (sender: ColorButton) = nil): ColorButton	
Form	uing.html#Form	uing: Form	
impl	uing.html#impl,Form	uing: impl(b: Form): RawForm	
impl=	uing.html#impl=,Form,RawForm	uing: impl=(b: Form; r: RawForm)	
add	uing.html#add,Form,string,Widget,bool	uing: add(f: Form; label: string; w: Widget; stretchy: bool = false)	
delete	uing.html#delete,Form,int	uing: delete(f: Form; index: int)	
padded	uing.html#padded,Form	uing: padded(f: Form): bool	
padded=	uing.html#padded=,Form,bool	uing: padded=(f: Form; padded: bool)	
newForm	uing.html#newForm,bool	uing: newForm(padded: bool = false): Form	
Grid	uing.html#Grid	uing: Grid	
impl	uing.html#impl,Grid	uing: impl(b: Grid): RawGrid	
impl=	uing.html#impl=,Grid,RawGrid	uing: impl=(b: Grid; r: RawGrid)	
add	uing.html#add,Grid,Widget,int,int,int,int,bool,Align,bool,Align	uing: add(g: Grid; w: Widget; left, top, xspan, yspan: int; hexpand: bool;\n    halign: Align; vexpand: bool; valign: Align)	
insertAt	uing.html#insertAt,Grid,Widget,Widget,At,int,int,int,int,bool,Align,bool,Align	uing: insertAt(g: Grid; w, existing: Widget; at: At; left, top, xspan, yspan: int;\n         hexpand: bool; halign: Align; vexpand: bool; valign: Align)	
padded	uing.html#padded,Grid	uing: padded(g: Grid): bool	
padded=	uing.html#padded=,Grid,bool	uing: padded=(g: Grid; padded: bool)	
newGrid	uing.html#newGrid,bool	uing: newGrid(padded: bool = false): Grid	
Image	uing.html#Image	uing: Image	
impl	uing.html#impl,Image	uing: impl(b: Image): RawImage	
impl=	uing.html#impl=,Image,RawImage	uing: impl=(b: Image; r: RawImage)	
add	uing.html#add,Image,pointer,int,int,int	uing: add(i: Image; pixels: pointer; pixelWidth: int; pixelHeight: int;\n    byteStride: int)	
free	uing.html#free,Image	uing: free(i: Image)	
newImage	uing.html#newImage,float,float	uing: newImage(width, height: float): Image	
Table	uing.html#Table	uing: Table	
TableValue	uing.html#TableValue	uing: TableValue	
TableModel	uing.html#TableModel	uing: TableModel	
impl	uing.html#impl,Table	uing: impl(b: Table): RawTable	
impl=	uing.html#impl=,Table,RawTable	uing: impl=(b: Table; r: RawTable)	
impl	uing.html#impl,TableValue	uing: impl(b: TableValue): RawTableValue	
impl=	uing.html#impl=,TableValue,RawTableValue	uing: impl=(b: TableValue; r: RawTableValue)	
impl	uing.html#impl,TableModel	uing: impl(b: TableModel): RawTableModel	
impl=	uing.html#impl=,TableModel,RawTableModel	uing: impl=(b: TableModel; r: RawTableModel)	
free	uing.html#free,TableValue	uing: free(t: TableValue)	
free	uing.html#free,TableModel	uing: free(t: TableModel)	
free	uing.html#free,ptr.TableSelection	uing: free(t: ptr TableSelection)	
`type`	uing.html#type,TableValue	uing: `type`(v: TableValue): TableValueType	
newTableValue	uing.html#newTableValue,string	uing: newTableValue(str: string): TableValue	
`$`	uing.html#$,TableValue	uing: `$`(v: TableValue): string	
newTableValue	uing.html#newTableValue,Image	uing: newTableValue(img: Image): TableValue	
image	uing.html#image,TableValue	uing: image(v: TableValue): Image	
newTableValue	uing.html#newTableValue,int	uing: newTableValue(i: int): TableValue	
getInt	uing.html#getInt,TableValue	uing: getInt(v: TableValue): int	
newTableValue	uing.html#newTableValue,float,float,float,float	uing: newTableValue(r, g, b, a: 0.0 .. 1.0 = 1.0): TableValue	
newTableValue	uing.html#newTableValue,Color,float	uing: newTableValue(color: Color; a: 0.0 .. 1.0 = 1.0): TableValue	
color	uing.html#color,TableValue	uing: color(v: TableValue): tuple[r, g, b, a: float]	
newTableModel	uing.html#newTableModel,ptr.TableModelHandler	uing: newTableModel(mh: ptr TableModelHandler): TableModel	
rowInserted	uing.html#rowInserted,TableModel,int	uing: rowInserted(m: TableModel; newIndex: int)	
rowChanged	uing.html#rowChanged,TableModel,int	uing: rowChanged(m: TableModel; index: int)	
rowDeleted	uing.html#rowDeleted,TableModel,int	uing: rowDeleted(m: TableModel; oldIndex: int)	
addTextColumn	uing.html#addTextColumn,Table,string,,,ptr.TableTextColumnOptionalParams	uing: addTextColumn(t: Table; name: string;\n              textModelColumn, textEditableModelColumn: int | bool;\n              textParams: ptr TableTextColumnOptionalParams = nil)	
addImageColumn	uing.html#addImageColumn,Table,string,int	uing: addImageColumn(table: Table; title: string; index: int)	
addCheckboxTextColumn	uing.html#addCheckboxTextColumn,Table,string,int,int,int,int,ptr.TableTextColumnOptionalParams	uing: addCheckboxTextColumn(t: Table; name: string; checkboxModelColumn,\n    checkboxEditableModelColumn, textModelColumn, textEditableModelColumn: int;\n                      textParams: ptr TableTextColumnOptionalParams = nil)	
addImageTextColumn	uing.html#addImageTextColumn,Table,string,int,int,int,ptr.TableTextColumnOptionalParams	uing: addImageTextColumn(t: Table; name: string;\n                   imageIndex, textIndex, editableMode: int;\n                   textParams: ptr TableTextColumnOptionalParams)	
addCheckboxColumn	uing.html#addCheckboxColumn,Table,string,int,int	uing: addCheckboxColumn(table: Table; title: string; index, editableMode: int)	
addProgressBarColumn	uing.html#addProgressBarColumn,Table,string,int	uing: addProgressBarColumn(table: Table; title: string; index: int)	
addButtonColumn	uing.html#addButtonColumn,Table,string,int,int	uing: addButtonColumn(table: Table; title: string; index, clickableMode: int)	
headerVisible	uing.html#headerVisible,Table	uing: headerVisible(t: Table): bool	
headerVisible=	uing.html#headerVisible=,Table,bool	uing: headerVisible=(t: Table; visible: bool)	
selectionMode	uing.html#selectionMode,Table	uing: selectionMode(table: Table): TableSelectionMode	
selectionMode=	uing.html#selectionMode=,Table,TableSelectionMode	uing: selectionMode=(table: Table; mode: TableSelectionMode)	
columnWidth	uing.html#columnWidth,Table,int	uing: columnWidth(table: Table; column: int): int	
setColumnWidth	uing.html#setColumnWidth,Table,int,int	uing: setColumnWidth(table: Table; column, width: int)	
sortIndicator	uing.html#sortIndicator,Table,int	uing: sortIndicator(table: Table; column: int): SortIndicator	
setSortIndicator	uing.html#setSortIndicator,Table,int,SortIndicator	uing: setSortIndicator(table: Table; column: int; indicator: SortIndicator)	
selection	uing.html#selection,Table	uing: selection(table: Table): seq[int]	
selection=	uing.html#selection=,Table,openArray[int]	uing: selection=(table: Table; sel: openArray[int])	
newTable	uing.html#newTable,ptr.TableParams	uing: newTable(params: ptr TableParams): Table	
show	uing.html#show,W	uing: show[W: Widget](w: W)	
hide	uing.html#hide,W	uing: hide[W: Widget](w: W)	
enabled	uing.html#enabled,W	uing: enabled[W: Widget](w: W): bool	
enable	uing.html#enable,W	uing: enable[W: Widget](w: W)	
disable	uing.html#disable,W	uing: disable[W: Widget](w: W)	
destroy	uing.html#destroy,W	uing: destroy[W: Widget](w: W)	
parent	uing.html#parent	uing: parent[W: Widget](w: W and not Window): W	
parent=	uing.html#parent=,W,Widget	uing: parent=[W: Widget](w: W; parent: Widget)	
handle	uing.html#handle,W	uing: handle[W: Widget](w: W): int	
signature	uing.html#signature,W	uing: signature[W: Widget](w: W): int	
typeSignature	uing.html#typeSignature,W	uing: typeSignature[W: Widget](w: W): int	
osSignature	uing.html#osSignature,W	uing: osSignature[W: Widget](w: W): int	
topLevel	uing.html#topLevel,W	uing: topLevel[W: Widget](w: W): bool	
visible	uing.html#visible,W	uing: visible[W: Widget](w: W): bool	
verifySetParent	uing.html#verifySetParent,W,Widget	uing: verifySetParent[W: Widget](w: W; parent: Widget)	
enabledToUser	uing.html#enabledToUser,W	uing: enabledToUser[W: Widget](w: W): bool	
free	uing.html#free,W	uing: free[W: Widget](w: W)	
DateTimePicker	uing.html#DateTimePicker	uing: DateTimePicker	
impl	uing.html#impl,DateTimePicker	uing: impl(b: DateTimePicker): RawDateTimePicker	
impl=	uing.html#impl=,DateTimePicker,RawDateTimePicker	uing: impl=(b: DateTimePicker; r: RawDateTimePicker)	
time	uing.html#time,DateTimePicker	uing: time(d: DateTimePicker): DateTime	
time=	uing.html#time=,DateTimePicker,DateTime	uing: time=(d: DateTimePicker; dateTime: DateTime)	
newDateTimePicker	uing.html#newDateTimePicker,proc(DateTimePicker)	uing: newDateTimePicker(onchanged: proc (sender: DateTimePicker) = nil): DateTimePicker	
newDatePicker	uing.html#newDatePicker,proc(DateTimePicker)	uing: newDatePicker(onchanged: proc (sender: DateTimePicker) = nil): DateTimePicker	
newTimePicker	uing.html#newTimePicker,proc(DateTimePicker)	uing: newTimePicker(onchanged: proc (sender: DateTimePicker) = nil): DateTimePicker	
